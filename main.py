from datetime import datetime
import json
import time
from colorama import Fore
import requests
import random


class terminal:
    BASE_URL = "https://app.0xterminal.game/api/"
    HEADERS = {
        "accept": "*/*",
        "accept-encoding": "gzip, deflate, br, zstd",
        "accept-language": "en-GB,en;q=0.9,en-US;q=0.8",
        "content-type": "application/json",
        "priority": "u=1, i",
        "referer": "https://app.0xterminal.game/app",
        "sec-ch-ua": '"Microsoft Edge";v="131", "Chromium";v="131", "Not_A Brand";v="24", "Microsoft Edge WebView2";v="131"',
        "sec-ch-ua-mobile": "?0",
        "sec-ch-ua-platform": '"Windows"',
        "sec-fetch-dest": "empty",
        "sec-fetch-mode": "cors",
        "sec-fetch-site": "same-origin",
        "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0",
        "if-none-match": 'W/"21a-y+T53dCeOf899eNKEl1z3T7wCec":',
    }

    def __init__(self):
        self.query_list = self.load_query("query.txt")
        self.token = None
        self.coins = 0

    def banner(self) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –±–∞–Ω–Ω–µ—Ä –¥–ª—è –±–æ—Ç–∞."""
        self.log("üéâ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ë–æ—Ç Terminal Station", Fore.CYAN)
        self.log("üöÄ –°–æ–∑–¥–∞–Ω–æ LIVEXORDS", Fore.CYAN)
        self.log("üì¢ –ö–∞–Ω–∞–ª: t.me/livexordsscript\n", Fore.CYAN)

    def log(self, message, color=Fore.RESET):
        print(
            Fore.LIGHTBLACK_EX
            + datetime.now().strftime("[%Y:%m:%d ~ %H:%M:%S] |")
            + " "
            + color
            + message
            + Fore.RESET
        )

    def load_config(self) -> dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ config.json."""
        try:
            with open("config.json", "r") as config_file:
                return json.load(config_file)
        except FileNotFoundError:
            self.log("‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!", Fore.RED)
            return {}
        except json.JSONDecodeError:
            self.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ config.json!", Fore.RED)
            return {}

    def load_query(self, path_file="query.txt") -> list:
        self.banner()

        try:
            with open(path_file, "r") as file:
                queries = [line.strip() for line in file if line.strip()]

            if not queries:
                self.log(f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: {path_file} –ø—É—Å—Ç–æ–π.", Fore.YELLOW)

            self.log(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(queries)} –∑–∞–ø—Ä–æ—Å–æ–≤.", Fore.GREEN)
            return queries

        except FileNotFoundError:
            self.log(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path_file}", Fore.RED)
            return []
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤: {e}", Fore.RED)
            return []

    def login(self, index: int) -> None:
        self.log("\U0001F512 –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏...", Fore.GREEN)

        if index >= len(self.query_list):
            self.log("\u274C –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤—Ö–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—â—ë —Ä–∞–∑.", Fore.RED)
            return

        req_url = f"{self.BASE_URL}statistic/user"
        token = self.query_list[index]

        self.log(
            f"\U0001F4CB –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω: {token[:10]}... (—Å–æ–∫—Ä–∞—â–µ–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)",
            Fore.CYAN,
        )

        headers = {**self.HEADERS, "cookie": token}

        try:
            self.log(
                "\U0001F4E1 –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...",
                Fore.CYAN,
            )

            response = requests.get(req_url, headers=headers)
            if response.status_code == 304:
                self.log("\u26A0 –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å 304: –ù–µ –∏–∑–º–µ–Ω–µ–Ω–æ.", Fore.YELLOW)
                self.log(f"–û—Ç–≤–µ—Ç: {response.text}", Fore.YELLOW)
                return

            response.raise_for_status()
            data = response.json()

            info = data.get("info", {})
            stats = data.get("statistic", {})
            pack_stats = data.get("packStatistic", {})
            referral_stats = data.get("referralStatistic", {})

            username = info.get("telegram", {}).get("username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            telegram_id = info.get("telegram", {}).get("id", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            ton_balance = stats.get("tonBalance", "0")
            terminal_balance = stats.get("terminalBalance", 0)
            next_harvest = stats.get("nextHarvestTimestamp", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            total_quests = stats.get("totalCompletedQuests", 0)

            self.token = token

            self.log("\u2705 –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!", Fore.GREEN)
            self.log(f"\U0001F464 –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram: {username}", Fore.LIGHTGREEN_EX)
            self.log(f"\U0001F4F2 ID Telegram: {telegram_id}", Fore.CYAN)
            self.log(f"\U0001FA99 –ë–∞–ª–∞–Ω—Å TON: {ton_balance}", Fore.LIGHTBLUE_EX)
            self.log(
                f"\U0001FA9A –ë–∞–ª–∞–Ω—Å Terminal: {terminal_balance}", Fore.LIGHTMAGENTA_EX
            )
            self.log(
                f"\U0001F4C5 –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–±–æ—Ä–∞ —É—Ä–æ–∂–∞—è: {next_harvest}", Fore.LIGHTCYAN_EX
            )
            self.log(
                f"\U0001F4DA –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–≤–µ—Å—Ç–æ–≤: {total_quests}",
                Fore.LIGHTYELLOW_EX,
            )

        except requests.exceptions.RequestException as e:
            self.log(f"\u274C –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥: {e}", Fore.RED)
            self.log(
                f"–û—Ç–≤–µ—Ç: {getattr(response, 'text', '–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}",
                Fore.YELLOW,
            )
        except ValueError as e:
            self.log(f"\u274C –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–≤–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å JSON): {e}", Fore.RED)
            self.log(
                f"–û—Ç–≤–µ—Ç: {getattr(response, 'text', '–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}",
                Fore.YELLOW,
            )
        except KeyError as e:
            self.log(f"\u274C –û—à–∏–±–∫–∞ –∫–ª—é—á–∞: {e}", Fore.RED)
            self.log(
                f"–û—Ç–≤–µ—Ç: {getattr(response, 'text', '–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}",
                Fore.YELLOW,
            )
        except Exception as e:
            self.log(f"\u274C –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", Fore.RED)
            self.log(
                f"–û—Ç–≤–µ—Ç: {getattr(response, 'text', '–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}",
                Fore.YELLOW,
            )

    def harvest(self) -> None:
        """–°–æ–±–∏—Ä–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã —Å —Å–µ—Ä–≤–µ—Ä–∞."""
        req_url_harvest = f"{self.BASE_URL}game/harvest"
        headers = {**self.HEADERS, "cookie": self.token}

        try:
            self.log("\U0001F331 –°–æ–±–∏—Ä–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã...", Fore.CYAN)
            response = requests.post(req_url_harvest, headers=headers)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∫–æ–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è (201)
            if response.status_code == 201:
                self.log("\u2705 –°–±–æ—Ä —É—Ä–æ–∂–∞—è –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!", Fore.GREEN)
            else:
                self.log(
                    f"\u274C –°–±–æ—Ä —É—Ä–æ–∂–∞—è –Ω–µ —É–¥–∞–ª—Å—è —Å –∫–æ–¥–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è: {response.status_code}",
                    Fore.RED,
                )
                self.log(f"–û—Ç–≤–µ—Ç: {response.text}", Fore.YELLOW)
                return

            # –†–∞–∑–±–æ—Ä JSON-–æ—Ç–≤–µ—Ç–∞
            data = response.json()
            claimed_terminal = data.get("claimedTerminal", 0)
            claimed_ton = data.get("claimedTon", "0")
            next_harvest_timestamp = data.get("nextHarvestTimestamp", 0)
            terminal_total = data.get("terminalTotal", 0)
            ton_total = data.get("tonTotal", "0")

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏ –≤ —á–∞—Å—ã, –º–∏–Ω—É—Ç—ã, —Å–µ–∫—É–Ω–¥—ã
            remaining_time = next_harvest_timestamp // 1000 - int(time.time())
            hours, remainder = divmod(remaining_time, 3600)
            minutes, seconds = divmod(remainder, 60)

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π
            self.log(
                f"\U0001FA9A –°–æ–±—Ä–∞–Ω–æ Terminal: {claimed_terminal}", Fore.LIGHTBLUE_EX
            )
            self.log(f"\U0001FA99 –°–æ–±—Ä–∞–Ω–æ TON: {claimed_ton}", Fore.LIGHTCYAN_EX)
            self.log(
                f"\U0001FA9A –í—Å–µ–≥–æ Terminal: {terminal_total}", Fore.LIGHTMAGENTA_EX
            )
            self.log(f"\U0001FA99 –í—Å–µ–≥–æ TON: {ton_total}", Fore.LIGHTGREEN_EX)
            self.log(
                f"\U0001F552 –°–ª–µ–¥—É—é—â–∏–π —Å–±–æ—Ä —É—Ä–æ–∂–∞—è —á–µ—Ä–µ–∑: {hours}—á {minutes}–º {seconds}—Å",
                Fore.LIGHTYELLOW_EX,
            )

        except requests.exceptions.RequestException as e:
            self.log(f"\u274C –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–±–æ—Ä —É—Ä–æ–∂–∞—è: {e}", Fore.RED)
            self.log(
                f"–û—Ç–≤–µ—Ç: {getattr(response, 'text', '–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}",
                Fore.YELLOW,
            )
        except ValueError as e:
            self.log(f"\u274C –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–≤–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å JSON): {e}", Fore.RED)
            self.log(
                f"–û—Ç–≤–µ—Ç: {getattr(response, 'text', '–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}",
                Fore.YELLOW,
            )
        except KeyError as e:
            self.log(f"\u274C –û—à–∏–±–∫–∞ –∫–ª—é—á–∞: {e}", Fore.RED)
            self.log(
                f"–û—Ç–≤–µ—Ç: {getattr(response, 'text', '–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}",
                Fore.YELLOW,
            )
        except Exception as e:
            self.log(f"\u274C –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", Fore.RED)
            self.log(
                f"–û—Ç–≤–µ—Ç: {getattr(response, 'text', '–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}",
                Fore.YELLOW,
            )

    def quest(self) -> None:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –∫–≤–µ—Å—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–∞."""
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–≤–µ—Å—Ç–æ–≤
        req_url_quests = f"{self.BASE_URL}quest/all"
        headers = {**self.HEADERS, "cookie": self.token}

        try:
            self.log("\U0001F4D6 –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–≤–µ—Å—Ç—ã...", Fore.CYAN)
            response = requests.get(req_url_quests, headers=headers)

            if response.status_code != 200:
                self.log(
                    f"\u274C –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–≤–µ—Å—Ç—ã: –ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è {response.status_code}",
                    Fore.RED,
                )
                self.log(f"–û—Ç–≤–µ—Ç: {response.text}", Fore.YELLOW)
                return

            # –†–∞–∑–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫–≤–µ—Å—Ç–∞
            data = response.json()
            quests = data.get("quests", [])

            if not quests:
                self.log("\U0001F614 –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.", Fore.YELLOW)
                return

            self.log(f"\U0001F4DA –ù–∞–π–¥–µ–Ω–æ {len(quests)} –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.", Fore.GREEN)

            for quest in quests:
                quest_id = quest.get("id")
                quest_name = quest.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ö–≤–µ—Å—Ç")
                quest_status = quest.get("status", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                quest_reward = quest.get("reward", 0)
                quest_link = quest.get("actionLink", "–ù–µ—Ç —Å—Å—ã–ª–∫–∏")

                self.log(
                    f"\U0001F539 –ö–≤–µ—Å—Ç: {quest_name} (ID: {quest_id})",
                    Fore.LIGHTCYAN_EX,
                )
                self.log(
                    f"  \U0001F4B8 –ù–∞–≥—Ä–∞–¥–∞: {quest_reward} | –°—Ç–∞—Ç—É—Å: {quest_status}",
                    Fore.LIGHTMAGENTA_EX,
                )
                self.log(f"  \U0001F517 –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ: {quest_link}", Fore.LIGHTBLUE_EX)

                if quest_status != "OPENED":
                    self.log(
                        f"  \U0001F6AB –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–≤–µ—Å—Ç {quest_id} - –ù–µ –æ—Ç–∫—Ä—ã—Ç.",
                        Fore.YELLOW,
                    )
                    continue

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–≤–µ—Å—Ç–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
                req_url_review = f"{self.BASE_URL}quest/review"
                payload = {"questId": quest_id}
                self.log(
                    f"\U0001F4E1 –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–≤–µ—Å—Ç {quest_id} –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É...", Fore.CYAN
                )

                review_response = requests.post(
                    req_url_review, headers=headers, json=payload
                )

                if review_response.status_code == 201:
                    self.log(
                        f"\U0001F4AA –ö–≤–µ—Å—Ç {quest_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω!",
                        Fore.GREEN,
                    )
                else:
                    self.log(
                        f"\u274C –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–≤–µ—Å—Ç {quest_id}: –ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è {review_response.status_code}",
                        Fore.RED,
                    )
                    self.log(f"–û—Ç–≤–µ—Ç: {review_response.text}", Fore.YELLOW)
                    continue

        except requests.exceptions.RequestException as e:
            self.log(f"\u274C –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–≤–µ—Å—Ç—ã: {e}", Fore.RED)
            self.log(
                f"–û—Ç–≤–µ—Ç: {getattr(response, 'text', '–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}",
                Fore.YELLOW,
            )
        except ValueError as e:
            self.log(f"\u274C –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–≤–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å JSON): {e}", Fore.RED)
            self.log(
                f"–û—Ç–≤–µ—Ç: {getattr(response, 'text', '–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}",
                Fore.YELLOW,
            )
        except KeyError as e:
            self.log(f"\u274C –û—à–∏–±–∫–∞ –∫–ª—é—á–∞: {e}", Fore.RED)
            self.log(
                f"–û—Ç–≤–µ—Ç: {getattr(response, 'text', '–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}",
                Fore.YELLOW,
            )
        except Exception as e:
            self.log(f"\u274C –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", Fore.RED)
            self.log(
                f"–û—Ç–≤–µ—Ç: {getattr(response, 'text', '–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}",
                Fore.YELLOW,
            )

    def game_coin_flip(self) -> None:
        """–ò–≥—Ä–∞–µ—Ç –≤ –∏–≥—Ä—É –ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ –ú–æ–Ω–µ—Ç—ã, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–ª–∏ —Å–ª—É—á–∞–π–Ω–æ —É–≥–∞–¥—ã–≤–∞–µ—Ç, –µ—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."""
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç—ã
        stats_url = f"{self.BASE_URL}game/coinflip/stats"
        headers = {**self.HEADERS, "cookie": self.token}

        try:
            self.log("\U0001FA99 –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è –ú–æ–Ω–µ—Ç—ã...", Fore.CYAN)
            response = requests.get(stats_url, headers=headers)

            if response.status_code != 200:
                self.log(
                    f"\u274C –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: –ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è {response.status_code}",
                    Fore.RED,
                )
                self.log(f"–û—Ç–≤–µ—Ç: {response.text}", Fore.YELLOW)
                return

            stats = response.json()
            terminal_games_left = stats.get("terminalGamesLeft", 0)
            flip_history = stats.get("flipHistory", [])
            min_bet = stats.get("minBetTerminal", "50")
            max_bet = stats.get("maxBetTerminal", "5000")

            self.log(f"\U0001F4AA –û—Å—Ç–∞–ª–æ—Å—å –∏–≥—Ä: {terminal_games_left}", Fore.GREEN)
            self.log(f"\U0001F4B0 –î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–∞–≤–æ–∫: {min_bet} - {max_bet}", Fore.LIGHTCYAN_EX)

            if not flip_history:
                self.log(
                    "\U0001F614 –ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —É–≥–∞–¥—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ.",
                    Fore.YELLOW,
                )

            # –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–π
            pattern = {}
            for flip in flip_history:
                session_id = flip.get("sessionId")
                side = flip.get("side")
                if session_id not in pattern:
                    pattern[session_id] = []
                pattern[session_id].append(side)

            self.log("\U0001F52E –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–π...", Fore.BLUE)
            for session, flips in pattern.items():
                self.log(
                    f"  –°–µ—Å—Å–∏—è {session}: {', '.join(flips)}", Fore.LIGHTMAGENTA_EX
                )

            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —É–≥–∞–¥—ã–≤–∞–Ω–∏—è
            def predict_guess(flip_history: list) -> str:
                if not flip_history:
                    return random.choice(["HEADS", "TAILS"])
                tails_count = sum(
                    1 for flip in flip_history if flip.get("side") == "TAILS"
                )
                heads_count = sum(
                    1 for flip in flip_history if flip.get("side") == "HEADS"
                )
                if tails_count > heads_count:
                    return "HEADS"
                elif heads_count > tails_count:
                    return "TAILS"
                else:
                    return random.choice(["HEADS", "TAILS"])

            # –ò–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É
            bet_url = f"{self.BASE_URL}game/coinflip/bet"
            flip_url = f"{self.BASE_URL}game/coinflip/flip"
            while terminal_games_left > 0:
                guess = predict_guess(flip_history)
                payload = {"token": "TERMINAL", "bet": min_bet, "guess": guess}

                self.log(f"\U0001F3B2 –£–≥–∞–¥—ã–≤–∞–µ–º: {guess}...", Fore.CYAN)
                bet_response = requests.post(bet_url, headers=headers, json=payload)

                if bet_response.status_code == 400:
                    error_message = bet_response.json().get("message", "")
                    if "active coinflip session" in error_message:
                        self.log(
                            "\U0001F6A7 –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è. –†–∞–∑—Ä–µ—à–∞–µ–º –µ—ë...",
                            Fore.YELLOW,
                        )
                        resolve_payload = {"guess": "HEADS"}
                        flip_response = requests.post(
                            flip_url, headers=headers, json=resolve_payload
                        )

                        if flip_response.status_code == 201:
                            self.log(
                                "\U0001F389 –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞.",
                                Fore.GREEN,
                            )
                            continue
                        else:
                            self.log(
                                f"\u274C –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Å–µ—Å—Å–∏—é: {flip_response.status_code}",
                                Fore.RED,
                            )
                            self.log(f"–û—Ç–≤–µ—Ç: {flip_response.text}", Fore.YELLOW)
                            return

                elif bet_response.status_code != 201:
                    self.log(
                        f"\u274C –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É: –ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è {bet_response.status_code}",
                        Fore.RED,
                    )
                    self.log(f"–û—Ç–≤–µ—Ç: {bet_response.text}", Fore.YELLOW)
                    break

                game_result = bet_response.json()
                session = game_result.get("session", {})
                status = session.get("status", "UNKNOWN")
                flips = session.get("flips", [])
                reward = session.get("reward", "0")
                next_reward = session.get("nextReward", "0")

                self.log(
                    f"\U0001F4A1 –†–µ–∑—É–ª—å—Ç–∞—Ç: {status}",
                    Fore.GREEN if status == "WIN" else Fore.RED,
                )
                self.log(f"  –ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è: {', '.join(flips)}", Fore.LIGHTBLUE_EX)
                self.log(
                    f"  –ù–∞–≥—Ä–∞–¥–∞: {reward} | –°–ª–µ–¥—É—é—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {next_reward}",
                    Fore.LIGHTCYAN_EX,
                )

                if status == "WIN":
                    self.log("\U0001F389 –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ —ç—Ç–æ—Ç —Ä–∞—É–Ω–¥!", Fore.GREEN)
                else:
                    self.log("\U0001F614 –ü–æ–≤–µ–∑—ë—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.", Fore.YELLOW)

                for flip in flips:
                    flip_history.append(
                        {"side": flip, "sessionId": terminal_games_left}
                    )

                terminal_games_left -= 1
                self.log(f"\U0001F4AA –û—Å—Ç–∞–ª–æ—Å—å –∏–≥—Ä: {terminal_games_left}", Fore.GREEN)

        except requests.exceptions.RequestException as e:
            self.log(f"\u274C –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É: {e}", Fore.RED)
        except Exception as e:
            self.log(f"\u274C –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", Fore.RED)


if __name__ == "__main__":
    ter = terminal()
    index = 0
    max_index = len(ter.query_list)
    config = ter.load_config()

    if max_index == 0:
        ter.log(
            "‚ùå [–û–®–ò–ë–ö–ê] –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.", Fore.RED
        )
        exit()

    ter.log(
        "üéâ [LIVEXORDS] === –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é Terminal Station === [LIVEXORDS]",
        Fore.YELLOW,
    )
    ter.log(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {max_index} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤.", Fore.YELLOW)

    while True:
        current_account = ter.query_list[index]
        display_account = (
            current_account[:10] + "..."
            if len(current_account) > 10
            else current_account
        )

        ter.log(
            f"üë§ [–ê–ö–ö–ê–£–ù–¢] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç {index + 1}/{max_index}: {display_account}",
            Fore.YELLOW,
        )

        try:
            ter.login(index)
        except Exception as e:
            ter.log(
                f"‚ùå [–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º {index + 1}: {e}", Fore.RED
            )
            continue

        ter.log("üõ†Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á...")
        tasks = {
            "harvest": "üåæ –°–±–æ—Ä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ù–∞–≥—Ä–∞–¥",
            "quest": "üÉè –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ö–≤–µ—Å—Ç–æ–≤ –ö–∞—Ä—Ç—ã",
            "game_coin_flip": "üé≤ –ò–≥—Ä–∞ –ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ –ú–æ–Ω–µ—Ç—ã",
        }

        for task_key, task_name in tasks.items():
            task_status = config.get(task_key, False)
            ter.log(
                f"[–ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø] {task_name}: {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if task_status else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ'}",
                Fore.YELLOW if task_status else Fore.RED,
            )

            if task_status:
                if hasattr(ter, task_key):
                    try:
                        ter.log(f"üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º {task_name}...", Fore.CYAN)
                        getattr(ter, task_key)()
                    except Exception as e:
                        ter.log(
                            f"‚ùå [–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å {task_name}: {e}", Fore.RED
                        )
                else:
                    ter.log(
                        f"‚ùå [–û–®–ò–ë–ö–ê] –ó–∞–¥–∞—á–∞ {task_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç–∫–∑–µ–º–ø–ª—è—Ä–µ terminal.",
                        Fore.RED,
                    )

        if index == max_index - 1:
            ter.log("üîÅ –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞.", Fore.YELLOW)
            ter.log(
                f"‚è≥ –°–ø–∏–º {config.get('delay_loop', 30)} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º."
            )
            time.sleep(config.get("delay_loop", 30))
            index = 0
        else:
            ter.log(
                f"‚û°Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ {config.get('delay_account_switch', 10)} —Å–µ–∫—É–Ω–¥.",
                Fore.YELLOW,
            )
            time.sleep(config.get("delay_account_switch", 10))
            index += 1
